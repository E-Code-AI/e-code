# Infrastructure complète pour millions d'utilisateurs
# Configuration Kubernetes production-grade avec isolation réelle

---
# Namespace avec resource quotas
apiVersion: v1
kind: Namespace
metadata:
  name: e-code-platform
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-quota
  namespace: e-code-platform
spec:
  hard:
    requests.cpu: "100"
    requests.memory: 200Gi
    limits.cpu: "200"
    limits.memory: 400Gi
    persistentvolumeclaims: "20"

---
# PostgreSQL Cluster avec réplication
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: e-code-platform
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
  template:
    metadata:
      labels:
        app: postgres-primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "ecode"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_REPLICATION_MODE
          value: "master"
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Read Replicas
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-replica
  namespace: e-code-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres-replica
  template:
    metadata:
      labels:
        app: postgres-replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_REPLICATION_MODE
          value: "slave"
        - name: POSTGRES_MASTER_HOST
          value: "postgres-primary"
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"

---
# Redis Cluster pour cache et sessions
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: e-code-platform
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args:
        - "--cluster-enabled"
        - "yes"
        - "--cluster-config-file"
        - "/data/nodes.conf"
        - "--cluster-node-timeout"
        - "5000"
        - "--appendonly"
        - "yes"
        - "--maxmemory"
        - "2gb"
        - "--maxmemory-policy"
        - "allkeys-lru"
        ports:
        - containerPort: 6379
        - containerPort: 16379
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1"
        volumeMounts:
        - name: redis-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# Application principale avec auto-scaling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: e-code-platform
  namespace: e-code-platform
spec:
  replicas: 10  # Minimum 10 replicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 5
      maxUnavailable: 0
  selector:
    matchLabels:
      app: e-code-platform
  template:
    metadata:
      labels:
        app: e-code-platform
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - e-code-platform
              topologyKey: kubernetes.io/hostname
      containers:
      - name: e-code-platform
        image: gcr.io/votre-projet-ecode/e-code-platform:production
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "5000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: e-code-secrets
              key: DATABASE_URL
        - name: REDIS_CLUSTER
          value: "redis-cluster-0.redis-cluster:6379,redis-cluster-1.redis-cluster:6379,redis-cluster-2.redis-cluster:6379"
        - name: MAX_CONNECTIONS
          value: "1000"
        - name: WORKER_THREADS
          value: "4"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: e-code-platform-hpa
  namespace: e-code-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: e-code-platform
  minReplicas: 10
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 10
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Service avec load balancing
apiVersion: v1
kind: Service
metadata:
  name: e-code-platform-lb
  namespace: e-code-platform
  annotations:
    cloud.google.com/load-balancer-type: "External"
    cloud.google.com/backend-config: '{"default": "backend-config"}'
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  selector:
    app: e-code-platform
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# Backend configuration pour CDN et caching
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: backend-config
  namespace: e-code-platform
spec:
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false
    negativeCaching: true
    negativeCachingPolicy:
    - code: 404
      ttl: 120
    - code: 410
      ttl: 120
  connectionDraining:
    drainingTimeoutSec: 60
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /api/health
    port: 5000

---
# Ingress avec TLS et rate limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: e-code-platform-ingress
  namespace: e-code-platform
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  tls:
  - hosts:
    - ecode.cloud
    - www.ecode.cloud
    secretName: e-code-platform-tls
  rules:
  - host: ecode.cloud
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: e-code-platform-lb
            port:
              number: 80

---
# Container Orchestration Service pour isolation
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: container-runtime
  namespace: e-code-platform
spec:
  selector:
    matchLabels:
      name: container-runtime
  template:
    metadata:
      labels:
        name: container-runtime
    spec:
      hostPID: true
      hostNetwork: true
      containers:
      - name: container-runtime
        image: gcr.io/votre-projet-ecode/container-orchestrator:latest
        securityContext:
          privileged: true
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: cgroup
          mountPath: /sys/fs/cgroup
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup

---
# Network Policy pour isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: e-code-platform-network-policy
  namespace: e-code-platform
spec:
  podSelector:
    matchLabels:
      app: e-code-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: e-code-platform
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 5000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres-primary
    - podSelector:
        matchLabels:
          app: postgres-replica
    - podSelector:
        matchLabels:
          app: redis-cluster
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80