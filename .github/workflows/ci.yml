name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run check

      - name: Run ESLint (if configured)
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f eslint.config.js ]; then
            npm run lint || echo "No lint script found, skipping ESLint"
          else
            echo "No ESLint configuration found, skipping"
          fi
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
          retention-days: 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, creating placeholder test"
            echo "Unit tests would run here - add npm test script to package.json"
          fi

  sandbox-smoke-test:
    name: Sandbox Smoke Test
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build sandbox Docker image
        run: |
          docker build -f sandbox/Dockerfile -t ecode-sandbox:test ./sandbox

      - name: Build Go executor
        run: |
          cd server/execution
          go mod init executor 2>/dev/null || true
          go mod tidy
          go build -o docker-runner docker-runner.go

      - name: Start executor service
        run: |
          cd server/execution
          export EXECUTOR_API_KEY=test-key-12345
          export DOCKER_SOCKET=unix:///var/run/docker.sock
          export SANDBOX_TIMEOUT_SEC=10
          ./docker-runner &
          echo $! > executor.pid
          sleep 5

      - name: Run smoke test
        run: |
          chmod +x tests/smoke/run_executor_smoke_test.sh
          ./tests/smoke/run_executor_smoke_test.sh

      - name: Stop executor service
        if: always()
        run: |
          if [ -f server/execution/executor.pid ]; then
            kill $(cat server/execution/executor.pid) || true
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=high || echo "Security vulnerabilities found - review required"

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build main application image
        run: |
          docker build -t ecode-app:${{ github.sha }} .

      - name: Build sandbox image
        run: |
          docker build -f sandbox/Dockerfile -t ecode-sandbox:${{ github.sha }} ./sandbox

      - name: Build executor service
        run: |
          cd server/execution
          docker build -t ecode-executor:${{ github.sha }} .

      # Uncomment to push to registry
      # - name: Login to Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Push images
      #   run: |
      #     docker tag ecode-app:${{ github.sha }} ghcr.io/${{ github.repository }}/app:${{ github.sha }}
      #     docker tag ecode-sandbox:${{ github.sha }} ghcr.io/${{ github.repository }}/sandbox:${{ github.sha }}
      #     docker tag ecode-executor:${{ github.sha }} ghcr.io/${{ github.repository }}/executor:${{ github.sha }}
      #     docker push ghcr.io/${{ github.repository }}/app:${{ github.sha }}
      #     docker push ghcr.io/${{ github.repository }}/sandbox:${{ github.sha }}
      #     docker push ghcr.io/${{ github.repository }}/executor:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [sandbox-smoke-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Staging deployment would happen here"
          echo "Configure your staging deployment commands"
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [sandbox-smoke-test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Production deployment would happen here"
          echo "Configure your production deployment commands"
          # Example: kubectl apply -f k8s/production/
          # Example: Run deployment script with proper secrets