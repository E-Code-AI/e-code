#!/bin/bash

# Script pour r√©initialiser seulement le d√©ploiement (garder le cluster)
# Plus rapide que le nettoyage complet

set -e

PROJECT_ID="votre-projet-ecode"
ZONE="europe-west1-b"
NAMESPACE="e-code-platform"

echo "üîÑ R√©initialisation du d√©ploiement E-Code Platform"
echo "================================================"
echo ""
echo "Ce script va:"
echo "  ‚Ä¢ Garder le cluster Kubernetes existant"
echo "  ‚Ä¢ Supprimer seulement les applications d√©ploy√©es"
echo "  ‚Ä¢ Nettoyer les images Docker anciennes"
echo "  ‚Ä¢ R√©initialiser les configurations"
echo ""

# Configuration
gcloud config set project ${PROJECT_ID}
gcloud container clusters get-credentials e-code-cluster --zone=${ZONE} 2>/dev/null || \
gcloud container clusters get-credentials e-code-cluster-production --zone=${ZONE} 2>/dev/null || \
echo "Aucun cluster trouv√©"

# Fonction pour afficher les √©tapes
step() {
    echo ""
    echo "‚û°Ô∏è  $1"
    echo "-------------------------------------------"
}

# 1. Supprimer le namespace et toutes ses ressources
step "Suppression du namespace et des applications"

if kubectl get namespace ${NAMESPACE} &>/dev/null; then
    echo "Suppression du namespace ${NAMESPACE}..."
    kubectl delete namespace ${NAMESPACE} --timeout=60s || true
    
    # Attendre que le namespace soit compl√®tement supprim√©
    echo "Attente de la suppression compl√®te..."
    timeout 120s bash -c "while kubectl get namespace ${NAMESPACE} &>/dev/null; do sleep 2; done" || true
else
    echo "Namespace ${NAMESPACE} n'existe pas"
fi

# 2. Nettoyer les images Docker anciennes
step "Nettoyage des images Docker"

# Supprimer les anciennes images mais garder les 3 plus r√©centes
images=$(gcloud container images list --repository=gcr.io/${PROJECT_ID} --format="value(name)" 2>/dev/null || true)
if [ ! -z "$images" ]; then
    echo "$images" | while read -r image; do
        if [ ! -z "$image" ]; then
            echo "Nettoyage des anciennes versions de: $image"
            # Garder les 3 versions les plus r√©centes
            gcloud container images list-tags "$image" --limit=999 --sort-by=~timestamp \
                --format="value(digest)" | tail -n +4 | \
                xargs -r -I {} gcloud container images delete "$image@{}" --quiet --force-delete-tags || true
        fi
    done
else
    echo "Aucune image trouv√©e"
fi

# 3. Nettoyer les PersistentVolumeClaims orphelins
step "Nettoyage des volumes orphelins"

pvcs=$(kubectl get pvc --all-namespaces --no-headers 2>/dev/null | grep ${NAMESPACE} | awk '{print $1 " " $2}' || true)
if [ ! -z "$pvcs" ]; then
    echo "$pvcs" | while read -r ns pvc_name; do
        echo "Suppression du PVC: $pvc_name dans le namespace $ns"
        kubectl delete pvc "$pvc_name" -n "$ns" --timeout=30s || true
    done
else
    echo "Aucun PVC orphelin trouv√©"
fi

# 4. Nettoyer les LoadBalancer services orphelins
step "Nettoyage des services LoadBalancer"

# Trouver les services avec ExternalIP qui pourraient √™tre orphelins
services=$(kubectl get svc --all-namespaces --no-headers -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,TYPE:.spec.type | grep LoadBalancer || true)
if [ ! -z "$services" ]; then
    echo "$services" | while read -r ns svc_name svc_type; do
        if [[ "$ns" == *"e-code"* ]] || [[ "$svc_name" == *"e-code"* ]]; then
            echo "Suppression du service LoadBalancer: $svc_name dans $ns"
            kubectl delete svc "$svc_name" -n "$ns" --timeout=30s || true
        fi
    done
else
    echo "Aucun service LoadBalancer orphelin trouv√©"
fi

# 5. Recr√©er le namespace propre
step "Recr√©ation du namespace propre"

kubectl create namespace ${NAMESPACE}

# Labeller le namespace pour le monitoring
kubectl label namespace ${NAMESPACE} name=${NAMESPACE}

# 6. V√©rifier l'√©tat du cluster
step "V√©rification de l'√©tat du cluster"

echo "üìä Nodes du cluster:"
kubectl get nodes

echo ""
echo "üìä Namespaces:"
kubectl get namespaces

echo ""
echo "üìä Stockage disponible:"
kubectl get storageclass

# 7. Pr√©parer pour un nouveau d√©ploiement
step "Pr√©paration pour le red√©ploiement"

echo "Namespace ${NAMESPACE} pr√™t pour un nouveau d√©ploiement"

# Afficher les commandes utiles
echo ""
echo "‚úÖ R√©initialisation termin√©e!"
echo "============================="
echo ""
echo "üìä √âtat actuel:"
echo "  ‚Ä¢ Cluster: Actif et propre"
echo "  ‚Ä¢ Namespace: ${NAMESPACE} cr√©√© et vide"
echo "  ‚Ä¢ Images: Nettoy√©es (versions r√©centes conserv√©es)"
echo "  ‚Ä¢ Volumes: Supprim√©s"
echo ""
echo "üöÄ Prochaines √©tapes:"
echo "  ‚Ä¢ Pour red√©ployer: ./deploy-scalable-infrastructure.sh"
echo "  ‚Ä¢ Pour d√©ployer l'app simple: ./deploy-full-app-to-gcp.sh"
echo "  ‚Ä¢ Pour appliquer seulement l'infra: kubectl apply -f kubernetes/production-infrastructure.yaml"
echo ""
echo "üìù Commandes utiles:"
echo "  ‚Ä¢ √âtat du cluster: kubectl get all --all-namespaces"
echo "  ‚Ä¢ Monitoring: kubectl top nodes"
echo "  ‚Ä¢ Logs du cluster: gcloud container clusters describe e-code-cluster --zone=${ZONE}"