et to votre-projet-ecode.                       Use `gcloud config set project [PROJECT_ID]` to change to a different project.                  gcloud config set project votre-projet-ecode    simita_invest@cloudshell:~ (votre-projet-ecode)$ gcloud config set project votre-projet-ecode   Updated property [core/project].                simita_invest@cloudshell:~ (votre-projet-ecode)$ # Create a working directory                   simita_invest@cloudshell:~ (votre-projet-ecode)$ cd ~                                           simita_invest@cloudshell:~ (votre-projet-ecode)$ mkdir -p e-code-build                          simita_invest@cloudshell:~ (votre-projet-ecode)$ cd e-code-build                                simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$                                   simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ # Create a minimal package.json   simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ cat > package.json << 'EOF'       > {                                             >   "name": "e-code-platform",                  >   "version": "1.0.0",                         >   "scripts": {                                >     "dev": "tsx server/index.ts",             >     "start": "node server/index.js"           >   },                                          >   "dependencies": {                           >     "express": "^4.18.0",                     >     "tsx": "^4.0.0"                           >   }                                           > }                                             > EOF                                           simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$                                   simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ # Create a simple test server     simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ mkdir -p server                   simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ cat > server/index.ts << 'EOF'    > import express from 'express';                > const app = express();                        > const PORT = process.env.PORT || 5000;        >                                               > app.get('/api/monitoring/health', (req, res) => {                                             >   res.json({ status: 'ok', timestamp: new Date().toISOString() });                            > });                                           >                                               > app.get('/', (req, res) => {                  >   res.send('E-Code Platform is running on GCP!');                                             > });                                           >                                               > app.listen(PORT, '0.0.0.0', () => {           >   console.log(`Server running on port ${PORT}`);                                              > });                                           > EOF                                           simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$                                   simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ # Create simple Dockerfile        simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$ cat > Dockerfile << 'EOF'         > FROM node:18-alpine                           > WORKDIR /app                                  > COPY package.json .                           > RUN npm install                               > COPY . .                                      > EXPOSE 5000                                   > CMD ["npm", "run", "dev"]                     > EOF                                           simita_invest@cloudshell:~/e-code-build (votre-projet-ecode)$                                   